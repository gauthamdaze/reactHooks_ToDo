{"ast":null,"code":"var _jsxFileName = \"/Users/gauthame/Downloads/Tutorials/ReactHooks_Todo/src/components/TodoApp.js\";\nimport React, { useState } from \"react\";\nimport \"./todoapp.css\";\n\nfunction TodoApp() {\n  const [task, setTask] = useState(\"\");\n  const [tasklist, setTaskList] = useState([]);\n\n  const handleChange = e => {\n    setTask(e.target.value);\n  };\n\n  const AddTask = () => {\n    if (task !== \"\") {\n      const taskDetails = {\n        id: Math.floor(Math.random() * 1000),\n        value: task,\n        isCompleted: false\n      };\n      setTaskList([...tasklist, taskDetails]);\n    }\n  };\n\n  const deletetask = (e, id) => {\n    e.preventDefault();\n    setTaskList(tasklist.filter(t => t.id != id));\n  };\n\n  const taskCompleted = (e, id) => {\n    e.preventDefault(); //let's find index of element\n\n    const element = tasklist.findIndex(elem => elem.id == id); //copy array into new variable\n\n    const newTaskList = [...tasklist]; //edit our element\n\n    newTaskList[element] = { ...newTaskList[element],\n      isCompleted: true\n    };\n    setTaskList(newTaskList);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"todo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"text\",\n    id: \"text\",\n    onChange: e => handleChange(e),\n    placeholder: \"Add task here...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"add-btn\",\n    onClick: AddTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, \"Add\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }), tasklist !== [] ? /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, tasklist.map(t => /*#__PURE__*/React.createElement(\"li\", {\n    className: t.isCompleted ? \"crossText\" : \"listitem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, t.value, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"completed\",\n    onClick: e => taskCompleted(e, t.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 15\n    }\n  }, \"Completed\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"delete\",\n    onClick: e => deletetask(e, t.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }\n  }, \"Delete\")))) : null);\n}\n\nexport default TodoApp;","map":{"version":3,"sources":["/Users/gauthame/Downloads/Tutorials/ReactHooks_Todo/src/components/TodoApp.js"],"names":["React","useState","TodoApp","task","setTask","tasklist","setTaskList","handleChange","e","target","value","AddTask","taskDetails","id","Math","floor","random","isCompleted","deletetask","preventDefault","filter","t","taskCompleted","element","findIndex","elem","newTaskList","map"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"./todoapp.css\";\n\nfunction TodoApp() {\n  const [task, setTask] = useState(\"\");\n  const [tasklist, setTaskList] = useState([]);\n\n  const handleChange = (e) => {\n    setTask(e.target.value);\n  };\n\n  const AddTask = () => {\n    if (task !== \"\") {\n      const taskDetails = {\n        id: Math.floor(Math.random() * 1000),\n        value: task,\n        isCompleted: false,\n      };\n\n      setTaskList([...tasklist, taskDetails]);\n    }\n  };\n\n  const deletetask = (e, id) => {\n    e.preventDefault();\n    setTaskList(tasklist.filter((t) => t.id != id));\n  };\n\n  const taskCompleted = (e, id) => {\n    e.preventDefault();\n    //let's find index of element\n    const element = tasklist.findIndex((elem) => elem.id == id);\n\n    //copy array into new variable\n    const newTaskList = [...tasklist];\n\n    //edit our element\n    newTaskList[element] = {\n      ...newTaskList[element],\n      isCompleted: true,\n    };\n\n    setTaskList(newTaskList);\n  };\n\n  return (\n    <div className=\"todo\">\n      <input\n        type=\"text\"\n        name=\"text\"\n        id=\"text\"\n        onChange={(e) => handleChange(e)}\n        placeholder=\"Add task here...\"\n      />\n      <button className=\"add-btn\" onClick={AddTask}>\n        Add\n      </button>\n      <br />\n      {tasklist !== [] ? (\n        <ul>\n          {tasklist.map((t) => (\n            <li className={t.isCompleted ? \"crossText\" : \"listitem\"}>\n              {t.value}\n              <button\n                className=\"completed\"\n                onClick={(e) => taskCompleted(e, t.id)}\n              >\n                Completed\n              </button>\n\n              <button className=\"delete\" onClick={(e) => deletetask(e, t.id)}>\n                Delete\n              </button>\n            </li>\n          ))}\n        </ul>\n      ) : null}\n    </div>\n  );\n}\n\nexport default TodoApp;\n"]},"metadata":{},"sourceType":"module"}